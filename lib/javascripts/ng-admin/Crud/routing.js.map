{"version":3,"sources":["../../../../src/javascripts/ng-admin/Crud/routing.js"],"names":["templateProvider","viewName","defaultView","$stateParams","Configuration","customTemplate","view","getViewByEntityAndType","entity","template","viewProvider","e","error404","Error","status","enabled","routing","$stateProvider","state","abstract","url","params","parent","controller","controllerAs","listLayoutTemplate","resolve","dataStore","DataStore","filterData","ReadQueries","getAllReferencedData","getFilterReferences","filterEntries","filters","name","Entry","createArrayFromRest","targetField","targetEntity","identifier","map","addEntry","uniqueId","entry","page","value","squash","search","sortField","sortDir","views","grid","listTemplate","response","getAll","totalItems","referenceData","getReferenceData","fields","data","referenceEntries","references","getReferences","entries","mapEntries","fillReferencesValuesFromCollection","setEntries","getEntity","prepare","$window","$injector","invoke","query","datastore","window","showTemplate","id","rawEntry","getOne","type","getUrl","mapEntry","values","referencedListData","getReferencedListData","getReferencedLists","identifierValue","referencedListEntries","referencedLists","targetFields","entryWithReferences","fillReferencesValuesFromEntry","referenceDataForReferencedLists","$q","promises","Object","keys","all","referenceEntriesForReferencedLists","referencedListName","createTemplate","defaultValues","previousState","$state","current","length","createForFields","getFields","forEach","key","choiceData","choiceEntries","choices","editTemplate","deleteTemplate","batchDeleteTemplate","ids","$inject"],"mappings":"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","file":"routing.js","sourcesContent":["import DataStore  from 'admin-config/lib/DataStore/DataStore';\nimport Entry  from 'admin-config/lib/Entry';\nimport batchDeleteTemplate  from './delete/batchDelete.html';\nimport deleteTemplate  from './delete/delete.html';\nimport createTemplate  from './form/create.html';\nimport editTemplate  from './form/edit.html';\nimport listTemplate  from './list/list.html';\nimport listLayoutTemplate  from './list/listLayout.html';\nimport showTemplate  from './show/show.html';\n\nfunction templateProvider(viewName, defaultView) {\n    return ['$stateParams', 'NgAdminConfiguration', function ($stateParams, Configuration) {\n        var customTemplate;\n        var view = Configuration().getViewByEntityAndType($stateParams.entity, viewName);\n        customTemplate = view.template();\n        if (customTemplate) {\n            return customTemplate;\n        }\n        customTemplate = Configuration().customTemplate()(viewName);\n        if (customTemplate) {\n            return customTemplate;\n        }\n        return defaultView;\n    }];\n}\n\nfunction viewProvider(viewName) {\n    return ['$stateParams', 'NgAdminConfiguration', function ($stateParams, Configuration) {\n        var view;\n        try {\n            view = Configuration().getViewByEntityAndType($stateParams.entity, viewName);\n        } catch (e) {\n            var error404 = new Error('Unknown view or entity name');\n            error404.status = 404; // trigger the 404 error\n            throw error404;\n        }\n        if (!view.enabled) {\n            throw new Error('The ' + viewName + ' is disabled for this entity');\n        }\n        return view;\n    }];\n}\n\nfunction routing($stateProvider) {\n\n    $stateProvider\n        .state('listLayout', {\n            abstract: true,\n            url: '/:entity/list',\n            params: {\n                entity: null\n            },\n            parent: 'ng-admin',\n            controller: 'ListLayoutController',\n            controllerAs: 'llCtrl',\n            templateProvider: templateProvider('ListView', listLayoutTemplate),\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('ListView'),\n                filterData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getFilterReferences(false));\n                }],\n                filterEntries: ['dataStore', 'view', 'filterData', function (dataStore, view, filterData) {\n                    const filters = view.getFilterReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [filters[name].targetField()],\n                            filters[name].targetEntity().name(),\n                            filters[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(filters[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }]\n            }\n        })\n        .state('list', {\n            url: '?{search:json}&{page:int}&sortField&sortDir',\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            parent: 'listLayout',\n            views: {\n                grid: {\n                    controller: 'ListController',\n                    controllerAs: 'listController',\n                    template: listTemplate,\n                    resolve: {\n                        dataStore: () => new DataStore(),\n                        view: viewProvider('ListView'),\n                        response: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                            var page = $stateParams.page,\n                                filters = $stateParams.search,\n                                sortField = $stateParams.sortField,\n                                sortDir = $stateParams.sortDir;\n\n                            return ReadQueries.getAll(view, page, filters, sortField, sortDir);\n                        }],\n                        totalItems: ['response', function (response) {\n                            return response.totalItems;\n                        }],\n                        referenceData: ['ReadQueries', 'view', 'response', function (ReadQueries, view, response) {\n                            return ReadQueries.getReferenceData(view.fields(), response.data);\n                        }],\n                        referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                            const references = view.getReferences();\n                            for (var name in referenceData) {\n                                Entry.createArrayFromRest(\n                                    referenceData[name],\n                                    [references[name].targetField()],\n                                    references[name].targetEntity().name(),\n                                    references[name].targetEntity().identifier().name()\n                                ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                            }\n                        }],\n                        entries: ['dataStore', 'view', 'response', 'referenceEntries', function (dataStore, view, response, referenceEntries) {\n                            var entries = view.mapEntries(response.data);\n\n                            // shortcut to diplay collection of entry with included referenced values\n                            dataStore.fillReferencesValuesFromCollection(entries, view.getReferences(), true);\n\n                            // set entries here ???\n                            dataStore.setEntries(\n                                view.getEntity().uniqueId,\n                                entries\n                            );\n\n                            return entries;\n                        }],\n                        prepare: ['view', '$stateParams', 'dataStore', 'entries', '$window', '$injector', function(view, $stateParams, dataStore, entries, $window, $injector) {\n                            return view.prepare() && $injector.invoke(view.prepare(), view, {\n                                query: $stateParams,\n                                datastore: dataStore,\n                                view,\n                                Entry,\n                                entries,\n                                window: $window\n                            });\n                        }],\n                    }\n                }\n            }\n        });\n\n    $stateProvider\n        .state('show', {\n            parent: 'ng-admin',\n            url: '/:entity/show/:id?sortField&sortDir',\n            controller: 'ShowController',\n            controllerAs: 'showController',\n            templateProvider: templateProvider('ShowView', showTemplate),\n            params: {\n                entity: null,\n                id: null,\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('ShowView'),\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl());\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                referenceData: ['ReadQueries', 'view', 'entry', function (ReadQueries, view, entry) {\n                    return ReadQueries.getReferenceData(view.fields(), [entry.values]);\n                }],\n                referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                    const references = view.getReferences();\n                    for (var name in referenceData) {\n                        Entry.createArrayFromRest(\n                            referenceData[name],\n                            [references[name].targetField()],\n                            references[name].targetEntity().name(),\n                            references[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                    }\n                }],\n                referencedListData: ['$stateParams', 'ReadQueries', 'view', 'entry', function ($stateParams, ReadQueries, view, entry) {\n                    return ReadQueries.getReferencedListData(view.getReferencedLists(), $stateParams.sortField, $stateParams.sortDir, entry.identifierValue);\n                }],\n                referencedListEntries: ['dataStore', 'view', 'referencedListData', function (dataStore, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    for (var name in referencedLists) {\n                        Entry.createArrayFromRest(\n                            referencedListData[name],\n                            referencedLists[name].targetFields(),\n                            referencedLists[name].targetEntity().name(),\n                            referencedLists[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(referencedLists[name].targetEntity().uniqueId + '_list', entry));\n                    }\n                }],\n                entryWithReferences: ['dataStore', 'view', 'entry', 'referenceEntries', function(dataStore, view, entry, referenceEntries) {\n                    dataStore.fillReferencesValuesFromEntry(entry, view.getReferences(), true);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n                }],\n                referenceDataForReferencedLists: ['$q', 'ReadQueries', 'view', 'referencedListData', function ($q,ReadQueries, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    var promises = {};\n                    Object.keys(referencedLists).map(name => {\n                        promises[name] = ReadQueries.getReferenceData(referencedLists[name].targetFields(), referencedListData[name]);\n                    });\n                    return $q.all(promises);\n                }],\n                referenceEntriesForReferencedLists: ['dataStore', 'view', 'referenceDataForReferencedLists', function(dataStore, view, referenceDataForReferencedLists) {\n                    const referencedLists = view.getReferencedLists();\n                    Object.keys(referencedLists).map(referencedListName => {\n                        const references = referencedLists[referencedListName].getReferences();\n                        for (var name in references) {\n                            if (!referenceDataForReferencedLists[referencedListName][name]) {\n                                continue;\n                            }\n                            Entry.createArrayFromRest(\n                                referenceDataForReferencedLists[referencedListName][name],\n                                [references[name].targetField()],\n                                references[name].targetEntity().name(),\n                                references[name].targetEntity().identifier().name()\n                            ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                        }\n                    });\n                    return true;\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'entryWithReferences', 'referencedListEntries', 'referenceEntriesForReferencedLists', '$window', '$injector', function(view, $stateParams, dataStore, entry, entryWithReferences, referencedListEntries, referenceEntriesForReferencedLists, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('create', {\n            parent: 'ng-admin',\n            url: '/:entity/create?{defaultValues:json}',\n            controller: 'FormController',\n            controllerAs: 'formController',\n            templateProvider: templateProvider('CreateView', createTemplate),\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                defaultValues: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                previousState: ['$state', '$stateParams', ($state, $stateParams) => ({\n                    name: $state.current.name || 'edit',\n                    params: Object.keys($state.params).length > 0 ? $state.params : $stateParams,\n                })],\n                view: viewProvider('CreateView'),\n                entry: ['$stateParams', 'dataStore', 'view', function ($stateParams, dataStore, view) {\n                    var entry = Entry.createForFields(view.getFields(), view.entity.name());\n                    Object.keys($stateParams.defaultValues).forEach(key => entry.values[key] = $stateParams.defaultValues[key]);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n\n                    return entry;\n                }],\n                choiceData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getReferences(false));\n                }],\n                choiceEntries: ['dataStore', 'view', 'choiceData', function (dataStore, view, filterData) {\n                    const choices = view.getReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [choices[name].targetField()],\n                            choices[name].targetEntity().name(),\n                            choices[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(choices[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'choiceEntries', '$window', '$injector', function(view, $stateParams, dataStore, entry, choiceEntries, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('edit', {\n            parent: 'ng-admin',\n            url: '/:entity/edit/:id?sortField&sortDir',\n            controller: 'FormController',\n            controllerAs: 'formController',\n            templateProvider: templateProvider('EditView', editTemplate),\n            params: {\n                entity: null,\n                id: null,\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                previousState: ['$state', '$stateParams', ($state, $stateParams) => ({\n                    name: $state.current.name || 'edit',\n                    params: Object.keys($state.params).length > 0 ? $state.params : $stateParams,\n                })],\n                view: viewProvider('EditView'),\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl($stateParams.id));\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                referenceData: ['ReadQueries', 'view', 'entry', function (ReadQueries, view, entry) {\n                    return ReadQueries.getReferenceData(view.fields(), [entry.values]);\n                }],\n                referenceEntries: ['dataStore', 'view', 'referenceData', function (dataStore, view, referenceData) {\n                    const references = view.getReferences();\n                    for (var name in referenceData) {\n                        Entry.createArrayFromRest(\n                            referenceData[name],\n                            [references[name].targetField()],\n                            references[name].targetEntity().name(),\n                            references[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                    }\n                }],\n                referencedListData: ['$stateParams', 'ReadQueries', 'view', 'entry', function ($stateParams, ReadQueries, view, entry) {\n                    return ReadQueries.getReferencedListData(view.getReferencedLists(), $stateParams.sortField, $stateParams.sortDir, entry.identifierValue);\n                }],\n                referencedListEntries: ['dataStore', 'view', 'referencedListData', function (dataStore, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    for (var name in referencedLists) {\n                        Entry.createArrayFromRest(\n                            referencedListData[name],\n                            referencedLists[name].targetFields(),\n                            referencedLists[name].targetEntity().name(),\n                            referencedLists[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(referencedLists[name].targetEntity().uniqueId + '_list', entry));\n                    }\n                }],\n                entryWithReferences: ['dataStore', 'view', 'entry', 'referenceEntries', function(dataStore, view, entry, referenceEntries) {\n                    dataStore.fillReferencesValuesFromEntry(entry, view.getReferences(), true);\n                    dataStore.addEntry(view.getEntity().uniqueId, entry);\n                }],\n                choiceData: ['ReadQueries', 'view', function (ReadQueries, view) {\n                    return ReadQueries.getAllReferencedData(view.getReferences(false));\n                }],\n                choiceEntries: ['dataStore', 'view', 'choiceData', function (dataStore, view, filterData) {\n                    const choices = view.getReferences(false);\n                    for (var name in filterData) {\n                        Entry.createArrayFromRest(\n                            filterData[name],\n                            [choices[name].targetField()],\n                            choices[name].targetEntity().name(),\n                            choices[name].targetEntity().identifier().name()\n                        ).map(entry => dataStore.addEntry(choices[name].targetEntity().uniqueId + '_choices', entry));\n                    }\n                }],\n                referenceDataForReferencedLists: ['$q', 'ReadQueries', 'view', 'referencedListData', function ($q,ReadQueries, view, referencedListData) {\n                    const referencedLists = view.getReferencedLists();\n                    var promises = {};\n                    Object.keys(referencedLists).map(name => {\n                        promises[name] = ReadQueries.getReferenceData(referencedLists[name].targetFields(), referencedListData[name]);\n                    });\n                    return $q.all(promises);\n                }],\n                referenceEntriesForReferencedLists: ['dataStore', 'view', 'referenceDataForReferencedLists', function(dataStore, view, referenceDataForReferencedLists) {\n                    const referencedLists = view.getReferencedLists();\n                    Object.keys(referencedLists).map(referencedListName => {\n                        const references = referencedLists[referencedListName].getReferences();\n                        for (var name in references) {\n                            if (!referenceDataForReferencedLists[referencedListName][name]) {\n                                continue;\n                            }\n                            Entry.createArrayFromRest(\n                                referenceDataForReferencedLists[referencedListName][name],\n                                [references[name].targetField()],\n                                references[name].targetEntity().name(),\n                                references[name].targetEntity().identifier().name()\n                            ).map(entry => dataStore.addEntry(references[name].targetEntity().uniqueId + '_values', entry));\n                        }\n                    });\n                    return true;\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', 'referenceEntriesForReferencedLists', 'choiceEntries', 'entryWithReferences', '$window', '$injector', function(view, $stateParams, dataStore, entry, referenceEntriesForReferencedLists, choiceEntries, entryWithReferences, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('delete', {\n            parent: 'ng-admin',\n            url: '/:entity/delete/:id',\n            controller: 'DeleteController',\n            controllerAs: 'deleteController',\n            templateProvider: templateProvider('DeleteView', deleteTemplate),\n            params: {\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                dataStore: () => new DataStore(),\n                view: viewProvider('DeleteView'),\n                params: ['$stateParams', function ($stateParams) {\n                    return $stateParams;\n                }],\n                rawEntry: ['$stateParams', 'ReadQueries', 'view', function ($stateParams, ReadQueries, view) {\n                    return ReadQueries.getOne(view.getEntity(), view.type, $stateParams.id, view.identifier(), view.getUrl());\n                }],\n                entry: ['view', 'rawEntry', function(view, rawEntry) {\n                    return view.mapEntry(rawEntry);\n                }],\n                prepare: ['view', '$stateParams', 'dataStore', 'entry', '$window', '$injector', function(view, $stateParams, dataStore, entry, $window, $injector) {\n                    return view.prepare() && $injector.invoke(view.prepare(), view, {\n                        query: $stateParams,\n                        datastore: dataStore,\n                        view,\n                        Entry,\n                        entry,\n                        window: $window\n                    });\n\n                }],\n            }\n        });\n\n    $stateProvider\n        .state('batchDelete', {\n            parent: 'ng-admin',\n            url: '/:entity/batch-delete/{ids:json}',\n            controller: 'BatchDeleteController',\n            controllerAs: 'batchDeleteController',\n            templateProvider: templateProvider('BatchDeleteView', batchDeleteTemplate),\n            params: {\n                entity: null,\n                ids: [],\n                page: { value: 1, squash: true },\n                search: { value: {}, squash: true },\n                sortField: null,\n                sortDir: null\n            },\n            resolve: {\n                view: viewProvider('BatchDeleteView'),\n                params: ['$stateParams', function ($stateParams) {\n                    return $stateParams;\n                }]\n            }\n        });\n}\n\nrouting.$inject = ['$stateProvider'];\n\nexport default routing;\n"]}